
import { useState } from 'react';
import { DocumentAnalysis, SourceMatch } from '@/types/analysis';
import PlagiarismChart from './Charts/PlagiarismChart';
import AIContentChart from './Charts/AIContentChart';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ChartBar, FileText } from 'lucide-react';

interface ResultsPanelProps {
  analysis: DocumentAnalysis;
}

const ResultsPanel = ({ analysis }: ResultsPanelProps) => {
  return (
    <div className="bg-white rounded-xl p-8 shadow-lg">
      <h2 className="text-2xl font-bold text-teal-800 mb-6 flex items-center">
        <ChartBar className="mr-2" /> Document Analysis Results
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <StatCard 
          title="Plagiarism Score" 
          value={`${analysis.plagiarismScore}%`} 
          description="Percentage of content detected as plagiarized"
          colorClass={analysis.plagiarismScore > 30 ? "text-red-600" : "text-teal-600"}
        />
        <StatCard 
          title="AI Content Score" 
          value={`${analysis.aiScore}%`} 
          description="Percentage of content likely generated by AI"
          colorClass={analysis.aiScore > 50 ? "text-orange-600" : "text-teal-600"}
        />
        <StatCard 
          title="Originality Score" 
          value={`${analysis.textAnalysis.originalContent}%`} 
          description="Percentage of original content"
          colorClass="text-teal-600"
        />
      </div>
      
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-3 mb-6">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="plagiarism">Plagiarism Details</TabsTrigger>
          <TabsTrigger value="ai">AI Detection</TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div>
              <Card>
                <CardHeader>
                  <CardTitle>Content Breakdown</CardTitle>
                  <CardDescription>Analysis of your document's content composition</CardDescription>
                </CardHeader>
                <CardContent>
                  <PlagiarismChart 
                    original={analysis.textAnalysis.originalContent} 
                    plagiarized={analysis.textAnalysis.plagiarizedContent} 
                  />
                </CardContent>
              </Card>
            </div>
            <div>
              <Card>
                <CardHeader>
                  <CardTitle>Document Statistics</CardTitle>
                  <CardDescription>Key metrics about your document</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center pb-2 border-b">
                      <span className="text-gray-600">Word Count</span>
                      <span className="font-medium">{analysis.documentStats.wordCount.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between items-center pb-2 border-b">
                      <span className="text-gray-600">Character Count</span>
                      <span className="font-medium">{analysis.documentStats.characterCount.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between items-center pb-2 border-b">
                      <span className="text-gray-600">Page Count</span>
                      <span className="font-medium">{analysis.documentStats.pageCount}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Reading Time</span>
                      <span className="font-medium">{analysis.documentStats.readingTime} minutes</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <div className="mt-6 flex gap-4">
                <Button className="flex-1 bg-teal-600 hover:bg-teal-700">
                  Download Report
                </Button>
                <Button variant="outline" className="flex-1">
                  Share Results
                </Button>
              </div>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="plagiarism">
          <Card>
            <CardHeader>
              <CardTitle>Detected Sources</CardTitle>
              <CardDescription>Potential sources for plagiarized content</CardDescription>
            </CardHeader>
            <CardContent>
              {analysis.sourcesDetected.length > 0 ? (
                <div className="space-y-6">
                  {analysis.sourcesDetected.map((source, index) => (
                    <SourceItem key={index} source={source} index={index} />
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-gray-500">No plagiarized sources detected.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="ai">
          <Card>
            <CardHeader>
              <CardTitle>AI Content Analysis</CardTitle>
              <CardDescription>Detection of AI-generated content in your document</CardDescription>
            </CardHeader>
            <CardContent>
              <AIContentChart aiScore={analysis.aiScore} aiMarkers={analysis.aiMarkers} />
              
              <div className="mt-8">
                <h4 className="font-medium text-gray-800 mb-4">AI-Generated Sections</h4>
                {analysis.aiMarkers.length > 0 ? (
                  <div className="space-y-4">
                    {analysis.aiMarkers.map((marker, index) => (
                      <div key={index} className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-teal-700">{marker.type}</span>
                          <Badge variant="outline" className={getConfidenceBadgeColor(marker.confidence)}>
                            {marker.confidence.toFixed(1)}% Confidence
                          </Badge>
                        </div>
                        <div className="flex flex-wrap gap-2 mt-2">
                          {marker.sections.map((section, idx) => (
                            <Badge key={idx} variant="secondary">{section}</Badge>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-4">No AI-generated content detected.</p>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

interface StatCardProps {
  title: string;
  value: string;
  description: string;
  colorClass?: string;
}

const StatCard = ({ title, value, description, colorClass = "text-gray-800" }: StatCardProps) => {
  return (
    <div className="bg-gray-50 rounded-xl p-6 border border-gray-100">
      <h3 className="text-gray-600 text-sm font-medium mb-2">{title}</h3>
      <p className={`text-3xl font-bold mb-1 ${colorClass}`}>{value}</p>
      <p className="text-xs text-gray-500">{description}</p>
    </div>
  );
};

interface SourceItemProps {
  source: SourceMatch;
  index: number;
}

const SourceItem = ({ source, index }: SourceItemProps) => {
  const [expanded, setExpanded] = useState(false);
  
  return (
    <div className="border border-gray-200 rounded-lg overflow-hidden">
      <div className="flex items-center justify-between p-4 bg-gray-50">
        <div className="flex items-center">
          <div className="h-8 w-8 rounded-full bg-teal-100 text-teal-700 flex items-center justify-center font-medium mr-3">
            {index + 1}
          </div>
          <div>
            <h4 className="font-medium">{source.source}</h4>
            <a href={source.url} target="_blank" rel="noopener noreferrer" className="text-sm text-teal-600 hover:underline">
              {source.url}
            </a>
          </div>
        </div>
        <div className="flex items-center">
          <Badge variant="secondary" className="mr-3">
            {source.matchPercentage}% Match
          </Badge>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? 'Hide' : 'Show'} Snippets
          </Button>
        </div>
      </div>
      
      {expanded && (
        <div className="p-4 bg-white border-t border-gray-200">
          <h5 className="font-medium text-sm mb-2 text-gray-600">
            Matched Content Snippets:
          </h5>
          <div className="space-y-2">
            {source.snippets.map((snippet, idx) => (
              <div key={idx} className="text-sm bg-gray-50 p-3 rounded border border-gray-100 text-gray-700">
                "{snippet}"
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

const getConfidenceBadgeColor = (confidence: number): string => {
  if (confidence > 80) return 'bg-red-50 text-red-700 border-red-200';
  if (confidence > 60) return 'bg-orange-50 text-orange-700 border-orange-200';
  if (confidence > 40) return 'bg-yellow-50 text-yellow-700 border-yellow-200';
  return 'bg-blue-50 text-blue-700 border-blue-200';
};

export default ResultsPanel;
